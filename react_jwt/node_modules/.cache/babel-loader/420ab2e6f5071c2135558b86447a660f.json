{"ast":null,"code":"var _jsxFileName = \"/home/duha/Projects/react_jwt/src/components/Profil.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Input, InputNumber, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst Profil = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  let navigate = useNavigate();\n  const currentUser = JSON.parse(sessionStorage.data).data;\n  const token = JSON.parse(sessionStorage.data).token;\n  const [email, setEmail] = useState(currentUser.email);\n  const [nama, setNama] = useState(currentUser.nama);\n  const [gender, setGender] = useState(currentUser.gender);\n\n  const Login = value => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: value.email,\n        password: value.password\n      })\n    };\n    const urlFetch = fetch('http://127.0.0.1:5000/login', requestOptions);\n    urlFetch.then(res => {\n      return res.json();\n    }).then(resJson => {\n      if (resJson.message == \"Sukses\") {\n        sessionStorage.setItem('data', JSON.stringify(resJson.data));\n        navigate(\"/home\");\n      } else {\n        alert(resJson.message);\n      }\n    });\n  };\n\n  const onFinish = values => {\n    console.log('Received values of form: ', values); // const requestOptions = {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ \n    //     email: values.email, \n    //     password: values.password,\n    //     nama: values.nama, \n    //     gender: values.gender \n    //   })\n    // };\n    // const urlFetch = fetch('http://127.0.0.1:5000/user', requestOptions);\n    // urlFetch.then( res => {\n    //     return res.json() \n    // }).then( resJson => {\n    //     console.log(resJson.message);\n    //     Login(values);\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Profil \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, { ...formItemLayout,\n      form: form,\n      name: \"register\",\n      onFinish: onFinish,\n      initialValues: {\n        residence: ['zhejiang', 'hangzhou', 'xihu'],\n        prefix: '86'\n      },\n      scrollToFirstError: true,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        label: \"E-mail\",\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          defaultValue: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"nama\",\n        label: \"Nama\",\n        tooltip: \"What do you want others to call you?\",\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          defaultValue: nama,\n          onChange: e => setNama(e.target.value),\n          value: nama\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"gender\",\n        label: \"Gender\",\n        rules: [{\n          required: true,\n          message: 'Please select gender!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"select your gender\",\n          defaultValue: gender,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"L\",\n            children: \"Laki-Laki\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"P\",\n            children: \"Perempuan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailFormItemLayout,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Simpan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Profil, \"NTksXCCqupb4pTyuZAD7v1wUBEQ=\", false, function () {\n  return [Form.useForm, useNavigate];\n});\n\n_c = Profil;\nexport default Profil;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profil\");","map":{"version":3,"sources":["/home/duha/Projects/react_jwt/src/components/Profil.js"],"names":["React","useState","Form","Input","InputNumber","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","useNavigate","Option","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","Profil","form","useForm","navigate","currentUser","JSON","parse","sessionStorage","data","token","email","setEmail","nama","setNama","gender","setGender","Login","value","requestOptions","method","headers","body","stringify","password","urlFetch","fetch","then","res","json","resJson","message","setItem","alert","onFinish","values","console","log","residence","prefix","type","required","e","target","whitespace"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,IADF,EAEEC,KAFF,EAGEC,WAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,GANF,EAOEC,GAPF,EAQEC,QARF,EASEC,MATF,EAUEC,YAVF,QAWO,MAXP;AAYA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaP,MAAnB;AAEA,MAAMQ,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ,KADI;AAIRC,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE;AADJ;AAJI,GADW;AASrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ,KADM;AAIVC,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE;AADJ;AAJM;AATS,CAAvB;AAkBA,MAAMG,kBAAkB,GAAG;AACzBD,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE,EADJ;AAEFI,MAAAA,MAAM,EAAE;AAFN,KADM;AAKVH,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE,EADJ;AAEFI,MAAAA,MAAM,EAAE;AAFN;AALM;AADa,CAA3B;;AAaA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,IAASrB,IAAI,CAACsB,OAAL,EAAf;AAEA,MAAIC,QAAQ,GAAGb,WAAW,EAA1B;AACA,QAAMc,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,IAA1B,EAAgCA,IAApD;AACA,QAAMC,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,IAA1B,EAAgCC,KAA9C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAACyB,WAAW,CAACM,KAAb,CAAlC;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBlC,QAAQ,CAACyB,WAAW,CAACQ,IAAb,CAAhC;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBpC,QAAQ,CAACyB,WAAW,CAACU,MAAb,CAApC;;AAEA,QAAME,KAAK,GAAGC,KAAK,IAAI;AACrB,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAe;AAAEZ,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAf;AAAsBa,QAAAA,QAAQ,EAAEN,KAAK,CAACM;AAAtC,OAAf;AAHa,KAAvB;AAKE,UAAMC,QAAQ,GAAGC,KAAK,CAAC,6BAAD,EAAgCP,cAAhC,CAAtB;AACAM,IAAAA,QAAQ,CAACE,IAAT,CAAeC,GAAG,IAAI;AAClB,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,KAFD,EAEGF,IAFH,CAESG,OAAO,IAAI;AAClB,UAAGA,OAAO,CAACC,OAAR,IAAmB,QAAtB,EAA+B;AAC7BvB,QAAAA,cAAc,CAACwB,OAAf,CAAuB,MAAvB,EAA+B1B,IAAI,CAACiB,SAAL,CAAeO,OAAO,CAACrB,IAAvB,CAA/B;AACAL,QAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,OAHD,MAGK;AACH6B,QAAAA,KAAK,CAACH,OAAO,CAACC,OAAT,CAAL;AACD;AACF,KATD;AAUL,GAjBC;;AAmBA,QAAMG,QAAQ,GAAIC,MAAD,IAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC,EAD2B,CAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnBD;;AAqBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD,OACM1C,cADN;AAEE,MAAA,IAAI,EAAES,IAFR;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,QAAQ,EAAEgC,QAJZ;AAKE,MAAA,aAAa,EAAE;AACbI,QAAAA,SAAS,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,MAAzB,CADE;AAEbC,QAAAA,MAAM,EAAE;AAFK,OALjB;AASE,MAAA,kBAAkB,MATpB;AAAA,8BAWE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,KAAK,EAAE,CACL;AACEC,UAAAA,IAAI,EAAE,OADR;AAEET,UAAAA,OAAO,EAAE;AAFX,SADK,EAKL;AACEU,UAAAA,QAAQ,EAAE,IADZ;AAEEV,UAAAA,OAAO,EAAE;AAFX,SALK,CAHT;AAAA,+BAcE,QAAC,KAAD;AAAO,UAAA,YAAY,EAAEpB,KAArB;AAA4B,UAAA,QAAQ,EAAE+B,CAAC,IAAI9B,QAAQ,CAAC8B,CAAC,CAACC,MAAF,CAASzB,KAAV;AAAnD;AAAA;AAAA;AAAA;AAAA;AAdF;AAAA;AAAA;AAAA;AAAA,cAXF,eA4BE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,OAAO,EAAC,sCAHV;AAIE,QAAA,KAAK,EAAE,CACL;AACEuB,UAAAA,QAAQ,EAAE,IADZ;AAEEV,UAAAA,OAAO,EAAE,6BAFX;AAGEa,UAAAA,UAAU,EAAE;AAHd,SADK,CAJT;AAAA,+BAYE,QAAC,KAAD;AAAO,UAAA,YAAY,EAAE/B,IAArB;AAA2B,UAAA,QAAQ,EAAE6B,CAAC,IAAI5B,OAAO,CAAC4B,CAAC,CAACC,MAAF,CAASzB,KAAV,CAAjD;AAAmE,UAAA,KAAK,EAAEL;AAA1E;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,cA5BF,eA2CE,QAAC,IAAD,CAAM,IAAN;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,KAAK,EAAE,CACL;AACE4B,UAAAA,QAAQ,EAAE,IADZ;AAEEV,UAAAA,OAAO,EAAE;AAFX,SADK,CAHT;AAAA,+BAUE,QAAC,MAAD;AAAQ,UAAA,WAAW,EAAC,oBAApB;AAAyC,UAAA,YAAY,EAAEhB,MAAvD;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,cA3CF,eA2DE,QAAC,IAAD,CAAM,IAAN,OAAehB,kBAAf;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3DF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsED,CAxHD;;GAAME,M;UACWpB,IAAI,CAACsB,O,EAELZ,W;;;KAHXU,M;AA0HN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Cascader,\n  Select,\n  Row,\n  Col,\n  Checkbox,\n  Button,\n  AutoComplete,\n} from 'antd';\nimport { useNavigate } from \"react-router-dom\";\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 8,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst Profil = () => {\n  const [form] = Form.useForm();\n\n  let navigate = useNavigate();\n  const currentUser = JSON.parse(sessionStorage.data).data\n  const token = JSON.parse(sessionStorage.data).token\n  const [email, setEmail] = useState(currentUser.email)\n  const [nama, setNama] = useState(currentUser.nama)\n  const [gender, setGender] = useState(currentUser.gender)\n\n  const Login = value => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email: value.email, password: value.password })\n      };\n      const urlFetch = fetch('http://127.0.0.1:5000/login', requestOptions);\n      urlFetch.then( res => {\n          return res.json() \n      }).then( resJson => {\n        if(resJson.message == \"Sukses\"){\n          sessionStorage.setItem('data', JSON.stringify(resJson.data));\n          navigate(\"/home\")\n        }else{\n          alert(resJson.message);\n        }\n      });\n}\n\n  const onFinish = (values) => {\n    console.log('Received values of form: ', values);\n    // const requestOptions = {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify({ \n    //     email: values.email, \n    //     password: values.password,\n    //     nama: values.nama, \n    //     gender: values.gender \n    //   })\n    // };\n    // const urlFetch = fetch('http://127.0.0.1:5000/user', requestOptions);\n    // urlFetch.then( res => {\n    //     return res.json() \n    // }).then( resJson => {\n    //     console.log(resJson.message);\n    //     Login(values);\n    // });\n  };\n\n  return (\n    <div>\n      <h1> Profil </h1>\n      <Form\n        {...formItemLayout}\n        form={form}\n        name=\"register\"\n        onFinish={onFinish}\n        initialValues={{\n          residence: ['zhejiang', 'hangzhou', 'xihu'],\n          prefix: '86',\n        }}\n        scrollToFirstError\n      >\n        <Form.Item\n          name=\"email\"\n          label=\"E-mail\"\n          rules={[\n            {\n              type: 'email',\n              message: 'The input is not valid E-mail!',\n            },\n            {\n              required: true,\n              message: 'Please input your E-mail!',\n            },\n          ]}\n        >\n          <Input defaultValue={email} onChange={e => setEmail(e.target.value)}/>\n        </Form.Item>\n\n        <Form.Item\n          name=\"nama\"\n          label=\"Nama\"\n          tooltip=\"What do you want others to call you?\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your nickname!',\n              whitespace: true,\n            },\n          ]}\n        >\n          <Input defaultValue={nama} onChange={e => setNama(e.target.value)} value={nama}/>\n        </Form.Item>\n\n        <Form.Item\n          name=\"gender\"\n          label=\"Gender\"\n          rules={[\n            {\n              required: true,\n              message: 'Please select gender!',\n            },\n          ]}\n        >\n          <Select placeholder=\"select your gender\" defaultValue={gender}>\n            <Option value=\"L\">Laki-Laki</Option>\n            <Option value=\"P\">Perempuan</Option>\n          </Select>\n        </Form.Item>\n\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Simpan\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default Profil"]},"metadata":{},"sourceType":"module"}